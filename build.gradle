plugins {
    id 'com.palantir.docker' version '0.25.0' apply false
    id "org.owasp.dependencycheck" version "7.4.4"

}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    ext {
        sharedDir           = file("${project.rootDir}/shared")
        sailfishVersion     = '3.3.54'
    }

    ext.excludeSailfish = { rcd ->
        rcd.excludeModule("com.exactpro.sf", "sailfish-core")
        rcd.excludeModule("com.exactpro.sf", "sailfish-common")
        rcd.excludeModule("com.exactpro.sf", "sailfish-rest-api-client")
        rcd.excludeModule("com.exactpro.sf", "service-http")
    }

    group = 'com.exactpro.th2'
    version = release_version

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        maven {
            name 'MavenLocal'
            url sharedDir
        }
        maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            content {
                excludeSailfish(it)
            }
        }
        // ignoreGradleMetadataRedirection is used for sonatype because
        // Sailfish dependencies have constrains that interfere with our BOM
        // so we exclude Gradle metadata for this repositories.
        // We've checked these versions - they are compatible and safe to use
        maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            metadataSources {
                mavenPom()
                artifact()
                ignoreGradleMetadataRedirection()
            }
        }
        maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
            content {
                excludeSailfish(it)
            }
        }
        maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
            metadataSources {
                mavenPom()
                artifact()
                ignoreGradleMetadataRedirection()
            }
        }
        mavenCentral()
        mavenLocal()

        configurations.all {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    jar {
        manifest {
            attributes(
                    'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                    'Specification-Title':      '',
                    'Specification-Vendor':     'Exactpro Systems LLC',
                    'Implementation-Title':     project.archivesBaseName,
                    'Implementation-Vendor':    'Exactpro Systems LLC',
                    'Implementation-Vendor-Id': 'com.exactpro',
                    'Implementation-Version':   project.version
            )
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        repositories {
            maven {
                name = 'localRepo'
                url = sharedDir
            }
        }
    }
}

apply plugin: 'application'
apply plugin: 'com.palantir.docker'

dependencies {
    api platform('com.exactpro.th2:bom:4.1.0')

    implementation 'com.exactpro.th2:common:3.44.0'
    implementation 'com.exactpro.th2:sailfish-utils:3.14.0'
    implementation 'com.exactpro.th2:grpc-util:3.0.4'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

test {
    useJUnitPlatform()
}

application {
    mainClassName 'com.exactpro.th2.util.MicroserviceMain'
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}